pipeline {
    agent any

    tools {
    nodejs 'node16'
    terraform 'terraform'
}

    parameters {
        choice(name: 'APP_VERSION', choices: ['tetrisv1', 'tetrisv2'], description: 'Select which version to build and deploy.')
        choice(name: 'TERRAFORM_ACTION', choices: ['apply', 'destroy', 'skip'], description: 'Terraform action to perform')
    }

    environment {
        AWS_REGION    = 'us-east-1'
        ACCOUNT_ID    = '590183956481'
        SCANNER_HOME  = tool 'sonar-scanner'
        ECR_REPO_V1   = '590183956481.dkr.ecr.us-east-1.amazonaws.com/tetrisv1'
        ECR_REPO_V2   = '590183956481.dkr.ecr.us-east-1.amazonaws.com/tetrisv2'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Code') {
            steps {
                script {
                    def repoUrl = (params.APP_VERSION == 'tetrisv1') ?
                        'https://github.com/OluwaTossin/Tetris-EKS-Deployment.git' :
                        'https://github.com/OluwaTossin/Tetris-EKS-Deployment.git'
                    git branch: 'main', url: repoUrl
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectKey=$APP_VERSION \
                        -Dsonar.projectName=$APP_VERSION
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('OWASP Dependency Check') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Trivy Filesystem Scan') {
            steps {
                sh 'trivy fs . > trivy-fs-scan.txt'
            }
        }

        stage('Login to AWS ECR') {
            steps {
                sh '''
                    aws ecr get-login-password --region $AWS_REGION \
                    | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
                '''
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    def ecrRepo = (params.APP_VERSION == 'tetrisv1') ? env.ECR_REPO_V1 : env.ECR_REPO_V2
                    sh """
                        docker build -t ${params.APP_VERSION} .
                        docker tag ${params.APP_VERSION} ${ecrRepo}:latest
                        docker push ${ecrRepo}:latest
                    """
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    def ecrRepo = (params.APP_VERSION == 'tetrisv1') ? env.ECR_REPO_V1 : env.ECR_REPO_V2
                    sh "trivy image ${ecrRepo}:latest > trivy-image-scan.txt"
                }
            }
        }

        stage('Terraform Init') {
            when {
                expression { params.TERRAFORM_ACTION != 'skip' }
            }
            steps {
                sh 'terraform init'
            }
        }

        stage('Terraform Plan') {
            when {
                expression { params.TERRAFORM_ACTION != 'skip' }
            }
            steps {
                sh 'terraform plan'
            }
        }

        stage('Terraform Apply/Destroy') {
            when {
                expression { params.TERRAFORM_ACTION != 'skip' }
            }
            steps {
                sh "terraform ${params.TERRAFORM_ACTION} --auto-approve"
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/*.txt', allowEmptyArchive: true
        }
    }
}
